generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://root:1hNmz0guMYBNNG26yNcZ@imaginativenewsmaininstance.cztsnadwffym.us-east-1.rds.amazonaws.com:5432/ImaginativeNewsMainDatabaseNew"
}

enum AccountRuleEnum {
  user
  admin

}

enum AccountTypeEnum {
  individual
  company
  institution
}

enum AccountTypeProviderEnum {
  local
  facebook
  google
  apple
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model Currencies {
  id             Int     @id @default(autoincrement())
  code           String  @db.VarChar(500)
  symbol         String  @db.VarChar(500)
  withConditions Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LocalizedCurrencies LocalizedCurrencies[]
  @@map("currencies")
}

model LocalizedCurrencies {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(255)
  standardCode String     @db.VarChar(255)
  language     String     @db.VarChar(255)
  refId        Int
  Currencies   Currencies @relation(fields: [refId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("localized_currencies")
}

model PriceTypes {
  id             Int     @id @default(autoincrement())
  code           String  @db.VarChar(150)
  withConditions Boolean @default(false)

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  LocalizedPriceTypes LocalizedPriceTypes[]

  @@map("price_types")
}

model LocalizedPriceTypes {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(150)
  format     String     @db.VarChar(150)
  language   String     @db.VarChar(10)
  refId      Int
  PriceTypes PriceTypes @relation(fields: [refId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("localized_price_types")
}

model Disclaimers {
  id             Int     @id @default(autoincrement())
  code           String  @db.VarChar(150)
  withConditions Boolean @default(false)

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  LocalizedDisclaimers LocalizedDisclaimers[]

  @@map("disclaimers")
}

model LocalizedDisclaimers {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(150)
  language    String      @db.VarChar(10)
  refId       Int
  Disclaimers Disclaimers @relation(fields: [refId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("localized_disclaimers")
}

model HiringTypes {
  id             Int     @id @default(autoincrement())
  code           String  @db.VarChar(128)
  withConditions Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LocalizedHiringTypes LocalizedHiringTypes[]
  @@map("hiring_types")
}

model LocalizedHiringTypes {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  language    String      @db.VarChar(10)
  refId       Int
  HiringTypes HiringTypes @relation(fields: [refId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("localized_hiring_types")
}

model ListingTypes {
  id             Int     @id @default(autoincrement())
  code           String  @db.VarChar(150)
  category       String  @db.VarChar(50)
  withConditions Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LocalizedListingTypes LocalizedListingTypes[]
  @@map("listing_types")
}

model LocalizedListingTypes {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(150)
  language     String       @db.VarChar(255)
  refId        Int
  ListingTypes ListingTypes @relation(fields: [refId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("localized_listing_types")
}

model ImaginativeYears {
  id             Int     @id @default(autoincrement())
  name           String  @db.VarChar(128)
  withConditions Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("imaginative_years")
}

model Privacy {
  id             Int     @id @default(autoincrement())
  code           String  @db.VarChar(128)
  withConditions Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LocalizedPrivacy LocalizedPrivacy[]
  @@map("privacy")
}

model LocalizedPrivacy {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(100)
  language String  @db.VarChar(10)
  refId    Int
  Privacy  Privacy @relation(fields: [refId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("localized_privacy")
}

model PageType {
  id             Int     @id @default(autoincrement())
  code           String  @db.VarChar(128)
  withConditions Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LocalizedPageType LocalizedPageType[]
  @@map("pageType")
}

model LocalizedPageType {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(100)
  language String   @db.VarChar(10)
  refId    Int
  PageType PageType @relation(fields: [refId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("localized_pageType")
}

model BrandType {
  id             Int     @id @default(autoincrement())
  code           String  @db.VarChar(128)
  withConditions Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LocalizedBrandType LocalizedBrandType[]
  @@map("brandType")
}

model LocalizedBrandType {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  language  String    @db.VarChar(10)
  refId     Int
  BrandType BrandType @relation(fields: [refId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("localized_BrandType")
}

model UsesType {
  id             Int     @id @default(autoincrement())
  code           String  @db.VarChar(128)
  withConditions Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LocalizedUsesType LocalizedUsesType[]
  @@map("usesType")
}

model LocalizedUsesType {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(100)
  language String   @db.VarChar(10)
  refId    Int
  UsesType UsesType @relation(fields: [refId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("localized_UsesType")
}

model StockAvailability {
  id             Int     @id @default(autoincrement())
  code           String  @db.VarChar(128)
  withConditions Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LocalizedStockAvailability LocalizedStockAvailability[]
  @@map("stockAvailability")
}

model LocalizedStockAvailability {
  id                Int               @id @default(autoincrement())
  name              String            @db.VarChar(100)
  language          String            @db.VarChar(10)
  refId             Int
  StockAvailability StockAvailability @relation(fields: [refId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("localized_StockAvailability")
}

model Listings {
  id                     Int     @id @default(autoincrement())
  name                   String  @db.VarChar(3000)
  brandName              String  @db.VarChar(3000)
  description            String  @db.VarChar(3000)
  credentials            String  @db.VarChar(3000)
  advantages             String  @db.VarChar(3000)
  uses                   String  @db.VarChar(3000)
  url                    String  @db.VarChar(3000)
  price                  String?
  offerPrice             String?
  offerDescription       String? @db.VarChar(3000)
  //// optional fields depend on select other option in dropdowns
  otherStockAvailability String? @db.VarChar(150)
  otherPriceType         String? @db.VarChar(150)
  otherHiring            String? @db.VarChar(150)

  media         String[]
  socialLinks   String[]
  /// this for track updated fields to show it in the mobile view with red color
  updatedFields String[]

  stockAvailabilityId Int?
  pageTypeId          Int?
  privacyId           Int?
  listingTypeId       Int?
  currencyId          Int?
  hiringTypeId        Int?
  priceTypeId         Int?
  brandTypeId         Int?
  usesTypeId          Int?
  ownerId             Int?

  /// status 0 : normal , 1 : draft , 2 : template
  status Int @default(0)

  overallRating    Float @default(0)
  totalRatingCount Float @default(0)
  viewsCount       Int   @default(0)
  followCount      Int   @default(0)
  storiesCount     Int   @default(0)
  shareCount       Int   @default(0)

  /// review summary
  rate1Count Int @default(0)
  rate2Count Int @default(0)
  rate3Count Int @default(0)
  rate4Count Int @default(0)
  rate5Count Int @default(0)

  isEdited      Boolean @default(false)
  isRepublished Boolean @default(false)

  owner User? @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("listings")
}

model ListingReviews {
  id         Int      @id @default(autoincrement())
  ownerId    Int
  listingId  Int
  reviewText String   @db.VarChar(3000)
  starRating Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("listing_reviews")
}

model ListingFollowers {
  id        Int      @id @default(autoincrement())
  userId    Int
  listingId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("listing_followers")
}

model Story {
  id                   Int      @id @default(autoincrement())
  headerImage          String?  @db.VarChar(3000)
  headerLine           String?  @db.VarChar(3000)
  intro                String?  @db.VarChar(3000)
  body                 String?  @db.VarChar(3000)
  conclusion           String?  @db.VarChar(3000)
  otherImaginativeYear String?  @db.VarChar(3000)
  tagline              String?  @db.VarChar(3000)
  info                 String?  @db.VarChar(3000)
  introImages          String[]
  bodyImages           String[]
  conclusionImages     String[]
  ownerId              Int?
  listingId            Int?
  disclaimerId         Int?
  privacyId            Int?
  imaginativeYearId    Int?

  /// status 0 : normal , 1 : draft , 2 : template
  status Int @default(0)

  productViewCount Int @default(0)
  viewCount        Int @default(0)
  likeCount        Int @default(0)
  commentCount     Int @default(0)
  shareCount       Int @default(0)

  // relations
  owner User? @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stories")
}

model StoryLikes {
  id        Int      @id @default(autoincrement())
  userId    Int
  storyId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stories_likes")
}

model StoryComments {
  id        Int      @id @default(autoincrement())
  userId    Int
  storyId   Int
  comment   String   @db.VarChar(3000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stories_comments")
}

model User {
  id                   Int                     @id @default(autoincrement())
  name                 String                  @db.VarChar(500)
  email                String                  @unique @db.VarChar(500)
  photoUrl             String                  @default("https://gravatar.com/avatar/14978c9024af3c17cf195dff095d79e8?s=400&d=robohash&r=x")
  featuredProductName  String?                 @db.VarChar(200)
  featuredProductId    String?                 @db.VarChar(50)
  password             String                  @db.VarChar(255)
  lang                 String                  @default("en")
  provider             AccountTypeProviderEnum @default(local)
  type                 AccountTypeEnum         @default(individual)
  role                 AccountRuleEnum         @default(user)
  notificationsEnabled Boolean                 @default(false)
  followersCount       Int                     @default(0)
  productsCount        Int                     @default(0)
  storiesCount         Int                     @default(0)
  isVerified           Boolean                 @default(false)


  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // relations
  UserSetting UserSettings?
  stories     Story[]
  listings    Listings[]
  // map is the name of model in database

  @@map("users")
}

model UserVerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_verification_code")
}

model UserPasswordRecoveryTokens {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_recovery__password_tokens")
}

model UserRefreshTokens {
  token     String   @id @default(uuid())
  userId    Int
  createdAt DateTime @default(now())
  expireAt  DateTime

  @@map("user_refresh_tokens")
}

model UserNotificationTokens {
  token     String   @id @default(uuid())
  userId    Int
  createdAt DateTime @default(now())

  @@map("user_notifications_tokens")
}

model UserSettings {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  User   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_settings")
}

model UserFollowers {
  id         Int      @id @default(autoincrement())
  userId     Int
  followerId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("user_followers")
}

model UserFriendShip {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  confirmed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_friendship")
}

model Files {
  id   Int    @id @default(autoincrement())
  key  String @db.VarChar(255)
  url  String @db.VarChar(255)
  type String @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}
